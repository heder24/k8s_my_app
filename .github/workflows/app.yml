name: 'Terraform App deployment'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions: write-all
  # contents: read
  # issues: write

jobs:
  terraform:
    name: 'Terraform App Deployment'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: "./"

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    #INstall kubectl
    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
    #Install helm
    - name: Install Helm
      uses: azure/setup-helm@v1
      with:
        version: 'latest'

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init #-backend-config=config.remote.tfbackend #terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false -no-color

   # Add a comment to pull requests with plan results
    - name: add-plan-comment
      id: comment
      uses: actions/github-script@v3
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
          <details><summary>Show Plan</summary>
          
          \`\`\`${process.env.PLAN}\`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # Scan Terraform Config for Vulnerabilities

    - name: Run Snyk to check configuration files for security issues
      # Snyk can be used to break the build when it detects security issues.
      # In this case we want to upload the issues to GitHub Code Scanning
      continue-on-error: true
      uses: snyk/actions/iac@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --sarif-file-output=snyk.scan 
        sarif: false
    - name: Upload result to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: snyk.scan

    - name: Analyze for critical and high CVEs
      id: docker-scout
      uses: docker/scout-action@v1
      with:
        dockerhub-user: ${{ secrets.DOCKER_HUB_USER }}
        dockerhub-password: ${{ secrets.DOCKER_HUB_TOKEN }}
        command: quickview,cves
        only-severities: critical,high
        # image: //myapp
        sarif-file: scout-report.sarif
      
    - name: Upload SCAN result
      id: upload-sarif
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: docker scout findings
        path: scout-report.sarif
  
    # - name: Run Trivy vulnerability scanner in IaC mode
    #   uses: aquasecurity/trivy-action@master
    #   with:
    #     scan-type: 'config'
    #     hide-progress: false
    #     format: 'sarif'
    #     output: 'trivy-results.sarif'
    #     ignore-unfixed: true
    #     severity: 'CRITICAL,HIGH'

    # - name: Upload Trivy scan results to GitHub Security tab
    #   uses: github/codeql-action/upload-sarif@v2
    #   with:
    #     sarif_file: 'trivy-results.sarif'


    # - name: Run tfsec
    #   uses: aquasecurity/tfsec-sarif-action@9a83b5c3524f825c020e356335855741fd02745f
    #   with:
    #     sarif_file: tfsec.sarif

    # - name: Upload SARIF file
    #   uses: github/codeql-action/upload-sarif@v2
    #   with:
    #     # Path to SARIF file relative to the root of the repository
    #     sarif_file: tfsec.sarif

    #On push to "main", build or change infrastructure according to Terraform configuration files
    #Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply 
      env:
        apply: true
      #if: github.ref == 'refs/heads/"main"' && github.event_name == 'push' d
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=true

    - name: Terraform Destroy
      env:
        destroy: true #WafARN

      if: ${{ env.destroy == 'true' }} 
      #if: github.ref =true= 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform destroy -auto-approve -input=true

      